var FeedParser = require('feedparser'),
    request = require('request'),
    Firebase = require('firebase'),
    podcastList = [],
    globalOptions = {};

var count = 0,
    PodcastController = function (item, separator, remove) {

        if(!item){
            return;
        }
        if(!item.title){
            item.title = "Default Title";
        }

        _separator = separator; // '\u2013';
        _fator = 1000 / 60;
        _remove = remove; // 'Nerdcast';
        _number = '';
        _title = '';
        _description = '';
        _link = '';
        _cover = '';
        _published = '';
        _mp3 = '';
        _duration = '';
        _categories = [];
        _titleParts = [];

        var parts = item.title.split(_separator);
        if (parts.length == 2) {
            _number = parts[0].toUpperCase().replace(_remove.toUpperCase(), '');
            _title = parts[1];
        } else {
            _number = count + ' ';
            _title = item.title;
        }
        _description = item.description;

        try {
            var reg = /src=\".+\.jpg\"/;
            var matches = _description.match(reg);
            _cover = matches[0].split('=')[1].replace('"', '').replace('"', '');
        } catch (e) {
            _cover = '';
        }

        _link = item.link;
        _published = item.pubDate;
        if (item['enclosures'] && item['enclosures'][0] && item['enclosures'][0].url) {
            _mp3 = item['enclosures'][0].url;
        } else {
            _mp3 = item['enclosures'];
        }
        if (item['itunes:duration'] && item['itunes:duration']['#']) {
            _duration = item['itunes:duration']['#'];
        }

        _categories = item['categories'];

        var titleParts = _title.split(' ');
        for(var index in titleParts){
            if(titleParts[index].length > 2){
                _titleParts.push(titleParts[index]);
            }
        }

        this.getObject = function () {
            var podcast = {};
            podcast.number = _number.trim();
            podcast.title = _title.trim();
            podcast.description = _description;
            podcast.link = _link;
            podcast.cover = _cover;
            podcast.published = _published;
            podcast.mp3 = _mp3;
            podcast.duration = _duration;
            podcast.categories = _categories;
            podcast.titleParts = _titleParts;
            return podcast;
        }

    }

function setEvents(req, feedparser, callback, success) {
    req.on('error', function (error) {
        console.log(error);
    });
    req.on('response', function (res) {
        var stream = this;
        if (res.statusCode != 200) return this.emit('error', new Error('Bad status code'));
        stream.pipe(feedparser);

    });

    feedparser.on('error', function(error) {
    });
    feedparser.on('close', function(error) {
	console.log("fechado...");
    });
    feedparser.on('end', function(error) {
	console.log("fim de tudo");
	callback();
    });
    feedparser.on('complete', function(a) {
        console.log('complete',a);
    });
    feedparser.on('readable', function() {
        var stream = this,
            podLocal = new PodcastController(stream.read(), globalOptions.separator, globalOptions.remove),
            podcastItem = podLocal.getObject();
        success(podcastItem);
        count++;
    });
}

exports.process = function (options, callback, success) {
    console.log('podcastrss - options', options);
    globalOptions = options;
    var req = request(options.url);
    var feedparser = new FeedParser();
    setEvents(req, feedparser, callback, success);
}
