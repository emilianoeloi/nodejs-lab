var mongo = require('mongodb');
var monk = require('monk');
var request = require('request');
var db = monk('localhost:27017/firefoxos');

var urlStatTemplate = 'https://marketplace.firefox.com/api/v1/stats/app/{marketplaceId}/installs/?_user=emilianoeloi%40gmail.com%2Ccc1dc6de73a97c4b66cfe5b6959c09a5adffd2d07efff008da09eec3a6b2178042144a83cd8354025245ca473ae0232d415fa3f2ef9a04029c5c2fe6b3779a90%2C7fb93f3fca8541f7831a47f0f0195b56&end={end}&interval=day&lang=pt-BR&start={start}'
var marketplaceId = 'nerdcast-player';
var start = '2014-08-05';
var end = '2014-08-04';

Date.prototype.addDay = function(days) {
    var oldDate = this;
    var day = oldDate.getDate();
    day += days;
    var newDate = new Date(oldDate.getFullYear(), oldDate.getMonth(), day, oldDate.getHours(), oldDate.getMinutes());
    return newDate;
}

var compareDate = function(){
    var firstDate = arguments[0];
    var newFirstDate = [];
    var secondDate = arguments[0];
    var newSecondDate = [];

    newFirstDate.push(firstDate.getFullYear());
    newFirstDate.push(firstDate.getMonth());
    newFirstDate.push(firstDate.getDate());
    newFirstDate.push( new Date(newFirstDate.join('-')) );

    newSecondDate.push(secondDate.getFullYear());
    newSecondDate.push(secondDate.getMonth());
    newSecondDate.push(secondDate.getDate());
    newSecondDate.push( new Date(newSecondDate.join('-')) );

    console.log('First Date', newFirstDate[3]);
    console.log('Second Date', newSecondDate[3])

    return (newFirstDate == newSecondDate);
}

var updateStatsOfApps = function (startDate, endDate) {

    var appCollection = db.get('app');
    appCollection.find({'active': true}, function (err, doc) {

        var appList = [];
        var index = -1;

        var getNextApp = function () {
            index++;
            if (appList[index]) {
                return appList[index];
            }
        }

        var getStatsOfApp = function (app) {
            if (!app) {
                return;
            }
            if (!app.marketplaceId) {
                getStatsOfApp(getNextApp());
                return;
            }
            var urlStat = '';

            console.log('-start--> ', startDate);
            console.log('--> ', endDate);

            var y = startDate.getFullYear();
            var m = startDate.getMonth() + 1;
            var d = startDate.getDate();
            var strStart = y + '-' + m + '-' + d;

            var y = endDate.getFullYear();
            var m = endDate.getMonth() + 1;
            var d = endDate.getDate();
            var strEnd = y + '-' + m + '-' + d;

            var urlStat = urlStatTemplate.replace('{marketplaceId}', app.marketplaceId)
                .replace('{start}', strStart)
                .replace('{end}', strEnd);
            var checkInstalation = function (arr, date) {
                for (var i = 0; i < arr.length; i++) {
                    if (arr[i].date == date) {
                        return true;
                    }
                }
                return false;
            }
            console.log('urlStat', urlStat);
            request(urlStat, function (err, res, body) {
                console.log('req res');
                var fxosStats = JSON.parse(body);
                var id = app._id;
                delete app._id;
                if (app.lastStat && app.instalationList) {
                    for (var index in fxosStats.objects) {
                        var item = fxosStats.objects[index];
                        if (!checkInstalation(app.instalationList, item.date)) {
                            app.instalationList.push(item);
                        }
                    }
                } else {
                    app.instalationList = fxosStats.objects;
                }

                app.lastStat = new Date();
                appCollection.findAndModify({_id: id}, {$set: app}, {multi: false}, function (err, doc) {
                    if (err) {
                        console.log('err', err);
                    } else if (doc) {
                        console.log('sucesso', 'app');
                    } else {
                        console.log('notfound');
                    }
                    getStatsOfApp(getNextApp());
                })
            })
        }

        console.log('------ INI -----');
        if (!err) {
            appList = doc;
            getStatsOfApp(getNextApp());
        } else {
            console.log('Erro', err);
        }
    });
}

exports.updateStats = function () {
    updateStatsOfApps(arguments[0], arguments[1]);
}
